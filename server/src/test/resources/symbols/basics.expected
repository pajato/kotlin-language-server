DocumentSymbol("/Users/pmr/IdeaProjects/clones/pajato/kls-1.1.1/kotlin-language-server/server/build/resources/test/symbols/basics.kt", File, KtFile, package symbols@@const val message = "Hello Kotlin!"@@fun main() {@    val name = "Hello World"@    println(name)@    println(message)@    var counter = 0@    val foo = if (counter % 2 == 0) "even" else "odd"@    when (counter++) {@        1 -> println("Is one")@        2 -> println("Is two")@        else -> println("Is $counter and foo is $foo")@    }@}@)
    DocumentSymbol("symbols", Package, KtPackageDirective, package symbols, symbols)
        DocumentSymbol("symbols", Package, KtNameReferenceExpression, symbols)
    DocumentSymbol("message", Property, KtProperty, const val message = "Hello Kotlin!")
        DocumentSymbol(""Hello Kotlin!"", Property, KtStringTemplateExpression, "Hello Kotlin!")
            DocumentSymbol("Hello Kotlin!", Property, KtLiteralStringTemplateEntry, Hello Kotlin!)
    DocumentSymbol("main", Function, KtNamedFunction, fun main() {@    val name = "Hello World"@    println(name)@    println(message)@    var counter = 0@    val foo = if (counter % 2 == 0) "even" else "odd"@    when (counter++) {@        1 -> println("Is one")@        2 -> println("Is two")@        else -> println("Is $counter and foo is $foo")@    }@})
        DocumentSymbol("()", Function, KtParameterList, ())
        DocumentSymbol("main", Function, KtBlockExpression, {@    val name = "Hello World"@    println(name)@    println(message)@    var counter = 0@    val foo = if (counter % 2 == 0) "even" else "odd"@    when (counter++) {@        1 -> println("Is one")@        2 -> println("Is two")@        else -> println("Is $counter and foo is $foo")@    }@})
            DocumentSymbol("name", Property, KtProperty, val name = "Hello World")
                DocumentSymbol(""Hello World"", Property, KtStringTemplateExpression, "Hello World")
                    DocumentSymbol("Hello World", Property, KtLiteralStringTemplateEntry, Hello World)
            DocumentSymbol("main", Function, KtCallExpression, println(name))
                DocumentSymbol("println", Function, KtNameReferenceExpression, println)
                DocumentSymbol("main", Function, KtValueArgumentList, (name))
            DocumentSymbol("main", Function, KtCallExpression, println(message))
                DocumentSymbol("println", Function, KtNameReferenceExpression, println)
                DocumentSymbol("main", Function, KtValueArgumentList, (message))
            DocumentSymbol("counter", Property, KtProperty, var counter = 0)
            DocumentSymbol("foo", Property, KtProperty, val foo = if (counter % 2 == 0) "even" else "odd")
                DocumentSymbol("foo", Property, KtIfExpression, if (counter % 2 == 0) "even" else "odd")
                    DocumentSymbol("foo", Property, KtContainerNode, counter % 2 == 0)
                    DocumentSymbol("foo", Property, KtContainerNodeForControlStructureBody, "even")
                    DocumentSymbol("foo", Property, KtContainerNodeForControlStructureBody, "odd")
            DocumentSymbol("main", Function, KtWhenExpression, when (counter++) {@        1 -> println("Is one")@        2 -> println("Is two")@        else -> println("Is $counter and foo is $foo")@    })
                DocumentSymbol("main", Function, KtPostfixExpression, counter++)
                DocumentSymbol("main", Function, KtCallExpression, println("Is one"))
                    DocumentSymbol("println", Function, KtNameReferenceExpression, println)
                    DocumentSymbol("main", Function, KtValueArgumentList, ("Is one"))
                DocumentSymbol("main", Function, KtCallExpression, println("Is two"))
                    DocumentSymbol("println", Function, KtNameReferenceExpression, println)
                    DocumentSymbol("main", Function, KtValueArgumentList, ("Is two"))
                DocumentSymbol("main", Function, KtCallExpression, println("Is $counter and foo is $foo"))
                    DocumentSymbol("println", Function, KtNameReferenceExpression, println)
                    DocumentSymbol("main", Function, KtValueArgumentList, ("Is $counter and foo is $foo"))
